metavar var, x, y, z ::= {{ com variable name }}
metavar label, l {{ tex \ell }} ::= {{ com label name }}

grammar

typ, A, B, C :: 't_' ::= {{ com types }}
  | Top             ::  :: top    {{ com top type }} {{ tex \top }}
  | Base            ::  :: base   {{ com base type }} {{ tex \mathbb{B} }}
  | A -> B          ::  :: arrow  {{ com function type }}
  | { l : A }       ::  :: rcd    {{ com record type }}
  | A & B           ::  :: and    {{ com intersection type }}
  | ( A )           :: S:: paren

exp, e :: 'e_' ::= {{ com expressions }}
  | {}              ::  :: top    {{ com top value }}
  | b               ::  :: base   {{ com base literal }} {{ tex b }}
  | x               ::  :: var    {{ com variable }}
  | fix x : A . e   ::  :: fix    {{ com fixpoint }} {{ tex [[fix]]\,[[x]][[:]][[A]].\;[[e]] }}
  | \ x : A . e : B ::  :: abs    {{ com abstraction }} {{ tex [[\]][[x]][[:]][[A]].\;[[e]][[:]][[B]] }}
  | e1 e2           ::  :: app    {{ com application }}
  | { l = e }       ::  :: rcd    {{ com record }}
  | e . l           ::  :: proj   {{ com projection }}
  | e1 ,, e2        ::  :: merge  {{ com merging }}
  | e : A           ::  :: anno   {{ com casting }}
  | e1 [ x ~> e2 ]  :: M:: subst
  | ( e )           :: S:: paren

val, v :: 'v_' ::= {{ com values }}
  | {}              ::  :: top
  | b               ::  :: base
  | \ x : A . e : B ::  :: abs
  | { l = v }       ::  :: rcd
  | v1 ,, v2        ::  :: merge

arg :: 'arg_' ::= {{ com arguments }}
  | x   ::  :: var
  | v   ::  :: value
  | l   ::  :: label

ctx, G {{ tex \Gamma }} :: 'ctx_' ::= {{ com typing context }}
  | []              ::  :: empty  {{ tex \cdot }}
  | G , x : A       ::  :: cons

mode {{ tex \Leftrightarrow }} :: '' ::= {{ com typing mode }}
  | =>              ::  :: Inf
  | <=              ::  :: Chk

terminals :: 'terminals_' ::=
  | \            ::  :: lambda     {{ tex \lambda }}
  | ~>           ::  :: subst      {{ tex \mapsto }}
  | ->           ::  :: arrow      {{ tex \rightarrow }}
  | -->          ::  :: longarrow  {{ tex \hookrightarrow }}
  | ==>          ::  :: darrow     {{ tex \Downarrow }}
  | ~~>          ::  :: sarrow     {{ tex \rightsquigarrow }}
  | |->          ::  :: mapsto     {{ tex \longmapsto }}
  | <--          ::  :: leftarrow  {{ tex \leftarrow }}
  | <=           ::  :: check      {{ tex \Leftarrow }}
  | =>           ::  :: infer      {{ tex \Rightarrow }}
  | |-           ::  :: turnstile  {{ tex \vdash }}
  | |=           ::  :: dturnstile {{ tex \models }}
  | in           ::  :: in         {{ tex \in }}
  | *            ::  :: disjoint   {{ tex \, * \, }}
  | ~            ::  :: consistent {{ tex \approx }}
  | &            ::  :: intersect  {{ tex \, \& \, }}
  | ,,           ::  :: merge      {{ tex \, ,\!, \, }}

formula :: 'formula_' ::=
  | judgement             ::  :: judgement
  | not formula           :: M:: not       {{ tex \neg [[formula]] }}
  | formula1 or formula2  :: M:: or        {{ tex [[formula1]] \lor [[formula2]] }}
  | formula1 and formula2 :: M:: and       {{ tex [[formula1]] \land [[formula2]] }}
  | ( formula )           :: M:: brackets  {{ tex ([[formula]]) }}
  | < formula >           :: M:: highlight {{ tex \colorbox{lightgray}{$[[formula]]$} }}
  | [ formula ]           :: M:: hide      {{ tex }}
  | uniq G                ::  :: uniqG     {{ tex }}
  | x : A in G            ::  :: inG
  | x notin fv e          ::  :: fresh
  | x notin dom G         ::  :: notInGx   {{ tex [[x]] \notin [[G]] }}
  | l1 <> l2              ::  :: labelNeq  {{ tex [[l1]] \neq [[l2]] }}
  | T1 = T2               ::  :: typEq
  | e1 --> i e2           :: M:: multistep {{ tex [[e1]]~[[-->]][[i]]~[[e2]] }}
  | A * B                 :: M:: disjointSpec
  | v1 ~ v2               :: M:: consistentSpec

parsing
  t_arrow <= t_and
  t_arrow right t_arrow

subrules
  v <:: e

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Algorithmics :: '' ::=

defn
toplike A :: :: toplike :: TL_
{{ com Top-like types }}
{{ tex \rceil [[A]] \lceil }}
by


---------------- :: Top
toplike Top


toplike A
toplike B
---------------- :: And
toplike A & B


toplike B
---------------- :: Arrow
toplike A -> B


toplike A
---------------- :: Rcd
toplike {l:A}



defn
ordinary A :: :: ordinary :: O_
{{ com Ordinary types }}
{{ tex [[A]]^{\circ} }}
by


---------------- :: Top
ordinary Top


---------------- :: Base
ordinary Base


---------------- :: Arrow
ordinary (A->B)


---------------- :: Rcd
ordinary {l:A}



defn
split A B C :: :: spl :: Sp_
{{ com Splittable types }}
{{ tex [[B]] \lhd [[A]] \rhd [[C]] }}
by


-------------------:: And
split A&B A B


split B B1 B2
----------------------------- :: Arrow
split A->B A->B1 A->B2


split A A1 A2
----------------------------- :: Rcd
split {l:A} {l:A1} {l:A2}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Subtyping :: '' ::=

defn
A <: B :: :: sub :: Sub_
{{ com Subtyping }}
by


ordinary B
toplike B
--------------- :: Top
A <: B


--------------- :: Base
Base <: Base


ordinary B2
B1 <: A1
A2 <: B2
------------------------ :: Arrow
A1 -> A2 <: B1 -> B2


ordinary B
A <: B
------------------------ :: Rcd
{l:A} <: {l:B}


ordinary C
A <: C
------------------------- :: AndL
A & B <: C


ordinary C
B <: C
------------------------- :: AndR
A & B <: C


split B B1 B2
A <: B1
A <: B2
------------------------- :: Split
A <: B


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Typing :: '' ::=

defn
A |> B :: :: appdist :: AD_
{{ com Applicative distribution }}
{{ tex [[A]] \rhd [[B]] }}
by


---------------- :: Arrow
A -> B |> A -> B


----------------- :: TopArrow
Top |> Top -> Top


A |> A1 -> A2
B |> B1 -> B2
--------------------------- :: AndArrow
A & B |> A1 & B1 -> A2 & B2


------------------ :: Rcd
{l : A} |> {l : A}


---------------- :: TopRcd
Top |> {l : Top}


A |> {l : A'}
B |> {l : B'}
---------------------- :: AndRcd
A & B |> {l : A' & B'}



defn
G |- e mode A :: :: typing :: Typ_
{{ com Bidirectional typing }}
by


uniq G
----------------- :: Top
G |- {} => Top


uniq G
----------------- :: Base
G |- b => Base


uniq G
x : A in G
----------------- :: Var
G |- x => A


G , x : A |- e <= A
------------------------------------------- :: Fix
G |- fix x : A . e => A


G , x : A |- e <= B
------------------------------------------- :: Abs
G |- \x : A . e : B => A->B


G |- e1 => A
A |> B -> C
G |- e2 <= B
----------------------- :: App
G |- e1 e2 => C


G |- e => A
----------------------- :: Rcd
G |- {l=e} => {l:A}


G |- e => A
A |> {l:B}
----------------------- :: Proj
G |- e.l => B


G |- e1 => A
G |- e2 => B
A * B
------------------------------ :: Merge
G |- e1 ,, e2 => A & B


uniq G
[] |- v1 => A
[] |- v2 => B
v1 ~ v2
------------------------------ :: MergeV
G |- v1 ,, v2 => A & B


G |- e <= A
--------------------- :: Anno
G |- e:A => A


G |- e => A
A <: B
--------------------- :: Sub
G |- e <= B


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Semantics :: '' ::=

defn
v --> A v' :: :: casting :: Cast_
{{ com Type casting }}
{{ tex [[v]]\;[[-->]]_{[[A]]}\;[[v']] }}
by


ordinary A
toplike A
--------------------- :: Top
v  -->A  {}


--------------------- :: Base
b  -->Base  b


ordinary A2
not toplike A2
B1 <: A1
A2 <: B2
------------------------------------ :: Arrow
\x:A1.e:A2  -->B1->B2  \x:A1.e:B2


ordinary A
not toplike A
v  -->A  v'
--------------------------------- :: Rcd
{l=v}  -->{l:A}  {l=v'}


ordinary A
v1  -->A  v1'
--------------------------------- :: MergeL
v1,,v2  -->A  v1'


ordinary A
v2  -->A  v2'
--------------------------------- :: MergeR
v1,,v2  -->A  v2'


split A A1 A2
v  -->A1  v1
v  -->A2  v2
--------------------------------- :: Split
v  -->A  v1,,v2



defn
v ; arg --> e :: :: papp :: PApp_
{{ com Parallel application }}
{{ tex [[v]]\,\bullet\,[[arg]]\;[[-->]]\;[[e]] }}
by


----------------- :: Top
{} ; arg  -->  {}


v  -->A  v'
------------------------------------ :: Abs
\x:A.e:B ; v  -->  e [ x ~> v' ] : B


------------------- :: Rcd
{l=v} ; l  -->  v


v1 ; arg  -->  e1
v2 ; arg  -->  e2
------------------------- :: Merge
v1,,v2 ; arg  -->  e1,,e2



defn
e --> e' :: :: step :: Step_
{{ com Small-step operational semantics }}
{{ tex [[e]]\;[[-->]]\;[[e']] }}
by


----------------------------------------------------- :: Fix
fix x : A . e  -->  e [ x ~> fix x : A . e ] : A


v1 ; v2  -->  e
---------------- :: PApp
v1 v2  -->  e


v ; l  -->  e
---------------- :: PProj
v.l  -->  e


v  -->A  v'
---------------- :: Cast
v : A  -->  v'


e1  -->   e1'
------------------------------------- :: AppL
e1 e2  -->  e1' e2


e2  -->  e2'
------------------------------------- :: AppR
v1 e2  -->  v1 e2'


e  -->  e'
------------------------------------- :: Rcd
{l=e}  -->  {l=e'}


e  -->  e'
------------------------------------- :: Proj
e.l  -->  e'.l


e1  -->  e1'
e2  -->  e2'
------------------------------------- :: Merge
e1 ,, e2  -->  e1' ,, e2'


e1  -->  e1'
------------------------------------- :: MergeL
e1 ,, e2  -->  e1' ,, e2


e2  -->  e2'
------------------------------------- :: MergeR
v1 ,, e2  -->  v1 ,, e2'


e  -->  e'
------------------------------------- :: Anno
e : A  -->  e' : A
